<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>JPrasojo's blog - Java</title><link href="http://theprasojos.blogs.or.id/" rel="alternate"></link><link href="http://theprasojos.blogs.or.id/feeds/java.atom.xml" rel="self"></link><id>http://theprasojos.blogs.or.id/</id><updated>2007-12-01T00:00:00+00:00</updated><entry><title>Glassfish for Tomcat and WebMethods</title><link href="http://theprasojos.blogs.or.id/2007/12/01/glassfish-for-tomcat-and-webmethods/" rel="alternate"></link><published>2007-12-01T00:00:00+00:00</published><updated>2007-12-01T00:00:00+00:00</updated><author><name>Lintang JP</name></author><id>tag:theprasojos.blogs.or.id,2007-12-01:/2007/12/01/glassfish-for-tomcat-and-webmethods/</id><summary type="html">&lt;p&gt;These recent days I've been played around with Glassfish in my project. I have to build connectivity between our existing Card Management for Telco company product, created with pure jsp (yes, jsp treated as PHP, spaghetti or whatever you name it) to integrate with SAP. Our client provides WebMethods Integration …&lt;/p&gt;</summary><content type="html">&lt;p&gt;These recent days I've been played around with Glassfish in my project. I have to build connectivity between our existing Card Management for Telco company product, created with pure jsp (yes, jsp treated as PHP, spaghetti or whatever you name it) to integrate with SAP. Our client provides WebMethods Integration server 6.5 as our only and only way to interact with the SAP. OK then, I grabbed some code from my previous project with Tomcat and WebMethods 6.1 and try to reuse them in this project. Well, it works. But this code only deals with connectivity. Tomcat contacts WebMethods, and that's it. All transaction maintained by WebMethods, no need to think about rollback, commit, or anything, we apply that on WebMethods's flow services. So simple and cool !. But this current project is different. Installed WebMethods dont have any license of JDBC Adapter, it only has SAP Adapter. So in order to save to database or whatever to our Card Management system, we have to build our own connectivity method. Previously we thought about creating Stored Procedure inside our database that later can be invoked by WebMethods's JDBC Adapter, but the client doesnt want to buy the license. Hmm....&lt;/p&gt;
&lt;p&gt;Besides just store to database, our Card Management product also have to provide interfaces so that later on, it could synchronize any document with SAP. So SAP will hit our services if..let's say some PO created in SAP. In here, I &lt;em&gt;need to provide them with webservices&lt;/em&gt; to access all of our Card Management API in proper way.&lt;/p&gt;
&lt;p&gt;On other side, our Card Management also must be able to synchronize any action triggered from our side. Ok, I can use my previous code just to call the WebMethods's service, but I can not predict how long will it take. WebMethods will continue our request to SAP, and then SAP done some process inside, and after that it will returns a value to us. Based on those values, we must done an action, and after we finished done those action in our side, we must push the result back to SAP, send our document number also. I cant imagine how long the users will be wait for these sequence action. They will bury us :D&lt;/p&gt;
&lt;p&gt;I see that we can divide this process by synchronous and asynchronous action. There's some action that we need to retrieve the results back from SAP immediately, such as get price. I can't do anything for this action. Saving the price list in our Card Management will blow our mandays. And other process where the users dont care whether they get the result in real time or not. They can check back later to see what happen to their process. So, in here, I &lt;em&gt;need a messaging service&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, two needs, webservice and messaging. I was thought that I will install a several products for this. Spring webservice framework to make my life easier when creating webservices (their POJO style's are really cool and simple) and ActiveMQ to provide the messaging broker. All can be integrated within our tomcat instance. But,later I also have own more concern. I must not change too many configuration on currently running tomcat instance, since it runs stable right now. And also, user portal and backend integrations are 2 different thing. The users must not feel any &lt;strong&gt;'world wide wait'&lt;/strong&gt; thing when the backend process works hard to full fill their request. So here I decided to install one more instance of application servers for integration needs. And after some browsing, I decide to install Glassfish V2.&lt;/p&gt;
&lt;p&gt;Why glassfish ? well, let's say, first I impressed with it's admin console. JBoss guys should really pay attention on this admin console. And secondly, I fall in love with it's support of WebServices. Glassfish support WebServices monitoring. Here I can monitor who called my webservices, on what time, what data sent, and what data returned. This is very useful when reconcile any lost datas. And the third part is, this Glassfish thing has a great messaging supports based on Sun's IMQ. I also browsed the net for this feature, and many guys out there recommends it. Last but not least, Glassfish V2 is JEE 5 compliance app.server (if not the RI itself). Creating WebServices, session EJB's and MDB's are easier with Annotations. Say good bye to deployment descriptor.&lt;/p&gt;
&lt;p&gt;Ok, that's my review, maybe I'll write more about this later.&lt;/p&gt;</content></entry><entry><title>Webservices with spring</title><link href="http://theprasojos.blogs.or.id/2007/04/19/webservices-with-spring/" rel="alternate"></link><published>2007-04-19T00:00:00+01:00</published><updated>2007-04-19T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:theprasojos.blogs.or.id,2007-04-19:/2007/04/19/webservices-with-spring/</id><summary type="html">&lt;p&gt;These few days, I had a task to create a webservice client. Sounds interesting and challenging, because usually if we depends on weblogic's control, we can make any webservices client much much easier, just a few click, and tadaaa. The problem is, the webservice client will become stand alone module …&lt;/p&gt;</summary><content type="html">&lt;p&gt;These few days, I had a task to create a webservice client. Sounds interesting and challenging, because usually if we depends on weblogic's control, we can make any webservices client much much easier, just a few click, and tadaaa. The problem is, the webservice client will become stand alone module, so, I can't use any java controls since those controls will be managed by weblogic container during runtime.
Then I turn to find another simple and fast way to create webservice client. But, before that of course, since the remote system is not ready yet, I have to create some dummy web service first. Weblogic 9.2 having strange behaviour. First, we create webservice project from the Eclipse-based-IDE. After that, we generate the wsdl files. But, dont ever try to validate it :D because it will fail. Just pass and use those webservice to create weblogic client. That's strange, fail to validate, but it works :D&lt;/p&gt;
&lt;p&gt;Ok, dont waste time, since I already had the webservice simulator works no matter how :p I began to create the webservice client. Coding from scratch ? no, it's painful, and I need to do it fast. I turn out to spring and axis which offers it's integration. This is my bean config sample :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;org.apache.axis.client.ServiceFactory


http://localhost:7001/AggregatedInfoFeederSimulator/AggregatedInfo?WSDL


http://com/ericsson/aggregateinfo/sub/services


AggregatedInfoService


AggregatedInfoSoapPort


com.ericsson.mi3g.sub.aggregatedinfo.wsclient.RemoteInfoPortIntf


com.ericsson.mi3g.sub.aggregatedinfo.wsclient.RemoteInfoServiceIntf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'm using AggregatedInfoJaxRpcProxyFactoryBean, this is a class that extends JaxRpcPortProxyFactoryBean. We need to extend it to override the postProcessJaxRpcService(Service service) method that will be used to register which deserializer would be used to object that I pull from webservice. First time I try to run, the method is not being called at all, I'm curious. But after googling, I found out that we need to import the right class for the arguments. It should be javax.xml.rpc.encoding.Service;&lt;/p&gt;
&lt;p&gt;Ok, the webservice client is done, now it's time to develop the database persistence part. I'm using Ibatis. Ibatis is cool, and I prefer this to hibernate if we need to do the complex query. In telco apps, there are no such simple query, right ? also, we need to be ready if someday the query changed, new field added, depends on requirement.&lt;/p&gt;
&lt;p&gt;The database persistence done. Now, create the ant script to run this module, since I had lots of CLASSPATH to include. I can't put it all in bash script and change all the path when it's moved out to production. &lt;/p&gt;
&lt;p&gt;And that's it, I'm done.&lt;/p&gt;
&lt;p&gt;logger.info("from cyberjava with love....");&lt;/p&gt;</content></entry><entry><title>ESB #1 (Revised)</title><link href="http://theprasojos.blogs.or.id/2006/04/07/esb-1-revised/" rel="alternate"></link><published>2006-04-07T00:00:00+01:00</published><updated>2006-04-07T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:theprasojos.blogs.or.id,2006-04-07:/2006/04/07/esb-1-revised/</id><summary type="html">&lt;p&gt;Baru dapet chm tentang ESB(Enterprise Service Bus), karangan Dave Chappel dari &lt;a href="http://arih.wordpress.com"&gt;mas Ari&lt;/a&gt;. Nih ulasan bab pertamanya :&lt;/p&gt;
&lt;p&gt;Bab pertama ngejelasin tentang apa itu ESB(Enterprise Service Bus). Tahun-tahun sebelumnya kita mengenal istilah Service Oriented Architecture (SOA), Enterprise Application Integration (EAI), Business-to-Business (B2B), dan web services. Semua teknologi ini intinya …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Baru dapet chm tentang ESB(Enterprise Service Bus), karangan Dave Chappel dari &lt;a href="http://arih.wordpress.com"&gt;mas Ari&lt;/a&gt;. Nih ulasan bab pertamanya :&lt;/p&gt;
&lt;p&gt;Bab pertama ngejelasin tentang apa itu ESB(Enterprise Service Bus). Tahun-tahun sebelumnya kita mengenal istilah Service Oriented Architecture (SOA), Enterprise Application Integration (EAI), Business-to-Business (B2B), dan web services. Semua teknologi ini intinya sama, yaitu improvisasi hasil bisnis dari integrasi sistem-sistem yang telah ada sebelumnya. Sedangkan konsep ESB lebih kepada "..loosely coupled, highly distributed integration network that can scale beyond the limits of a hub-and-spoke EAI broker" . Jadi ketika bicara tentang ESB, maka didalamnya akan meliputi :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. Messaging

2. Web Services

3. Transformasi data

4. Intelligent Routing yang mampu meneruskan message dari node satu ke yang lain tanpa melalui mekanisme broadcast.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lebih lanjut dijelaskan dalam halaman berikutnya, tentang konsep-konsep apa saja yang telah diakomodir oleh generasi integrasi sebelumnya (SOA, EAI, B2B) sebagai berikut :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.It must adapt to suit the needs of general-purpose integration projects across a variety of integration situations, large and small. Adaptability includes providing a durable architecture that is capable of withstanding evolutions in protocols, interface technology, and even process modeling trends.


2.It must link together applications that span the extended enterprise using a single unified approach and a common infrastructure.


3.It must extend beyond the boundaries of a single corporate IT data center and into automating partner relationships such as B2B and supply-chain scenarios.


4.It must have simplicity of design and low barriers to entry, enabling the everyday IT professional to become a self-empowered integration architect.


5.It must provide an SOA across the pervasive integration that enables integration architects to have a broad, abstract view of corporate application assets and automated business processes.


6.It needs the flexibility and ability to react to and meet the needs of changing business requirements and competitive pressures.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Gambar berikut menunjukkan lebih jelas tentang posisi ESB dan teknologi integrasi pendahulunya.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jroller.com/resources/j/JPrasojo/Clipboard01.jpg"&gt;2&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. Traditional EAI Brokers.
Arsitektur EAI Broker seperti ini memiliki keunggulan dimana semua fungsi-fungsi yang disediakannya (termasuk manajemen routing dan bisnis rule) dapat diatur secara terpusat. Tetapi buku ini mengatakan bahwa arsitektur ini kurang cocok untuk level integrasi antar departemen atau unit bisnis yang berbeda. Lebih lanjut dijelaskan dalam bab 2 mengenai ini.

2. Application Server.
Application server dapat menghubungkan protokol-protokol yang berbeda dengan baik, namun hasilnya adalah sebuah aplikasi yang saling bergantung satu sama lain, yaitu antara integration logic dan application logic.


3. Message Oriented Middleware.
Menyediakan konektivitas yang baik, loosely coupled, dengan gaya asinkron, antar aplikasi. Hal ini memungkinkan beberapa aplikasi yang kecepatan responsenya berbeda, menjadi tidak saling menunggu satu sama lain. Namun, arsitektur MOM ini membutuhkan pemrograman low-level yang cukup lumayan, sehingga bisa jadi waktu development akan lama. Belum lagi masalah perbedaan fisik network yang menyebabkan beberapa infrastruktur MOM tertentu menjadi tidak bisa diandalkan.


4. Yang terakhir, ESB.
Disini, kita tidak lagi bicara tentang pemrograman, tetapi lebih ke arah bagaimana sebuah service di konfigurasi. Di ESB juga terdapat pemisahan arsitektur yang jelas antara business logic(proses bisnis aplikasi) dengan integration logic(routing dan transformasi format data).
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://jroller.com/resources/j/JPrasojo/Clipboard02.jpg"&gt;3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Traditional Integration Broker Architecture&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jroller.com/resources/j/JPrasojo/Clipboard03.jpg"&gt;4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ESB Architecture&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Berikut karakteristik dari ESB :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pervasiveness. &lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;An ESB can be adapted to suit the needs of general-purpose integration projects across a variety of integration situations. It is capable of building out integration projects that can span an entire organization and its business partners.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Highly distributed, event-driven SOA. &lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Loosely coupled integration components can be deployed on the bus across widely distributed geographic deployment topologies, yet are accessible as shared services from anywhere on the bus.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Selective deployment of integration components. &lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Adapters, distributed data transformation services, and content-based routing services can be selectively deployed when and where they are needed, and can be independently scaled.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;
Security and reliability. &lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;All components that communicate through the bus can take advantage of reliable messaging, transactional integrity, and secure authenticated communications.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;
Orchestration and process flow. &lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;An ESB allows data to flow across any applications and services that are plugged into the bus, whether local or remote.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;
Autonomous yet federated managed environment. &lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;An ESB supports local autonomy at a departmental and business unit level, and is still able to integrate in a larger managed integration environment.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;
Incremental adoption. An ESB can be used for small projects. &lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Each individual project can build into a much larger integration network, which can be remotely managed from anywhere on the bus.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;
XML support. &lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;An ESB can take advantage of XML as its &amp;quot;native&amp;quot; datatype.
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>JBoss Vs BES</title><link href="http://theprasojos.blogs.or.id/2006/04/07/jboss-vs-bes/" rel="alternate"></link><published>2006-04-07T00:00:00+01:00</published><updated>2006-04-07T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:theprasojos.blogs.or.id,2006-04-07:/2006/04/07/jboss-vs-bes/</id><summary type="html">&lt;p&gt;Finally, I know why I got this error :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;javax.naming.NameNotFoundException: OracleDS not bound ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Padahal di browse di Jboss console ada loh OracleDS. Udah kucoba ngeganti dengan java:OracleDS, java:/OracleDS, java:comp/env/OracleDS, semua nggak bisa....&lt;/p&gt;
&lt;p&gt;Ternyata ada konfigurasi yg harus ditambahin di oracle-ds.xml, selama ini kalo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Finally, I know why I got this error :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;javax.naming.NameNotFoundException: OracleDS not bound ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Padahal di browse di Jboss console ada loh OracleDS. Udah kucoba ngeganti dengan java:OracleDS, java:/OracleDS, java:comp/env/OracleDS, semua nggak bisa....&lt;/p&gt;
&lt;p&gt;Ternyata ada konfigurasi yg harus ditambahin di oracle-ds.xml, selama ini kalo lookup langsung OracleDS tuh, dia akan nyari di JVM yang sama. Pantesan, lha aku jalaninnya dengan debug di eclipse, jelas beda JVM ama JBoss nya. Setelah browsing, akhirnya nemu link yang bilang, bahwa ada konfigurasi yang harus ditambahin di oracle-ds.xml nya, yaitu ini :
false&lt;/p&gt;
&lt;p&gt;Dengan begini, dia akan lookup JNDI name ke localhost:1099 dan dapet deh OracleDS. Happy ending deh...&lt;/p&gt;
&lt;p&gt;Sekarang latihan bikin MDB di JBoss setelah sebelum nya sukses di BES. BES ? apa itu ? Borland Enterprise Server, J2EE nya Borland. Entah kenapa jatis partneran ma ni produk, kukira produk mereka hanya borland Delphi ama JBuilder, hehehe.&lt;/p&gt;
&lt;p&gt;Sekilas tentang BES 6.5, nggak ada yg amazing yah, standar2 aja, masih J2EE 1.3 compliant. Ngga bisa dibandingin ama webmethods Integration Server karena emang beda. BES lebih ke J2EE App.Server, sedangkan webMethods lebih ke Middleware, EAI Broker. Tapi fitur yg menarik di JBoss (dan satu-satunya yg menarik buatku) adalah SonicMQ nya. Sebanding dengan webMethods Broker.&lt;/p&gt;
&lt;p&gt;Semangat !!!&lt;/p&gt;</content></entry></feed>