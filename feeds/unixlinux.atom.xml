<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>JPrasojo's blog</title><link href="http://blog.theprasojos.web.id/" rel="alternate"></link><link href="http://blog.theprasojos.web.id/feeds/unixlinux.atom.xml" rel="self"></link><id>http://blog.theprasojos.web.id/</id><updated>2010-08-14T00:00:00+01:00</updated><entry><title>Bye bye OpenSolaris ?</title><link href="http://blog.theprasojos.web.id/bye-bye-opensolaris.html" rel="alternate"></link><updated>2010-08-14T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2010-08-14:bye-bye-opensolaris.html</id><summary type="html">&lt;p&gt;So, I heard that OpenSolaris will be dead a.k.a discontinued.
Me my self, currently has no reason to use OpenSolaris. Why ? Simple question, what cant a Solaris box do compared to OpenSolaris ? currently Solaris also stil free, gcc stil runs on it, (sunfreeware.com ?). Need to install Oracle ? Oracle onlys supports Solaris distribution - not OpenSolaris. Need SUN's good old JDK ? use Solaris :) Not to mention that OpenSolaris distro's loves x86 too much instead Sparc ( well, almost all of my machines in my test lab were sparc :D ). Nexenta for example, the one that I -was- believe to be the ice breaker in Solaris world with their apt-get style, seems love x86 too much. Not too mention the stupidness of OpenSolaris AI installer for Sparc, which need an x86 OpenSolaris to be installed first, plus its additional macro thingy to be configured during wanboot. Why would I need that in Solaris ? Why cant I just plug the disc and do boot - install to my sparc machine ?&lt;/p&gt;
&lt;p&gt;So now, there are only 2 options for my sparc machines, use Solaris, or Linux :D. Debian can run on Sparc platform. Just install sparc-utils, and we'll get the similar administration CLI just as we did on Sparc Solaris.&lt;/p&gt;
&lt;p&gt;But too bad, Debian's apt package for solaris mostly compiled for 32 bit platform. If we need to boost the performace for our apps, we should re-compile it. No big deal, gcc is available :)&lt;/p&gt;</summary><category term="OS Linux stuff OpenSolaris solaris"></category></entry><entry><title>Solaris Jumpstart on Linux</title><link href="http://blog.theprasojos.web.id/solaris-jumpstart-on-linux.html" rel="alternate"></link><updated>2010-08-10T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2010-08-10:solaris-jumpstart-on-linux.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;Intro :&lt;/em&gt;&lt;/strong&gt;
- Linux, Debian based (mine: Lenny), hostname : pegasus, act as the Solaris jumpstart server.
- Solaris, Solaris 10, hostname: solclient, will be the machine to be installed.
- IP addresses range 192.168.10.x (class C), make sure you use standard network class IP, this is where the standard broadcast address (192.168.10.255) comes into play during arp broadcast.
- solclient will broadcast arp request, replied by pegasus's rarpd, and then and IP address will be assigned. solclient will then download the minimum kernel using tftp. The kernel file name will be the ip address of the solclient. For example, if the assigned IP is 192.168.10.5, and then the kernel name will be C0A80A05. Another way is to use this command:&lt;/p&gt;
&lt;p&gt;elinpra@pegasus &amp;gt; printf "XXXXn" 192 168 10 5
C0A80A05&lt;/p&gt;
&lt;p&gt;This file should be stored inside the root directory of tftp. Check the tftp setting on &lt;strong&gt;/etc/inetd.conf&lt;/strong&gt;. Here is mine:&lt;/p&gt;
&lt;p&gt;elinpra@pegasus &amp;gt; cat /etc/inetd.conf
tftp dgram udp4 wait nobody /usr/sbin/tcpd /usr/sbin/in.tftpd /srv/tftp/&lt;/p&gt;
&lt;p&gt;Then, the file C0A80A05 should be put in&lt;strong&gt; /srv/tftp&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Steps :&lt;/p&gt;
&lt;p&gt;1. Install bootparamd, rarpd, tftpd and nfs-kernel-server in Linux server (pegasus)
root@pegasus &amp;gt; apt-get install bootparamd rarpd tftpd nfs-kernel-server
2. Run iptables -F, make sure no firewall in Linux server
root@pegasus &amp;gt; iptables -F
3. Check the mac address of the solaris client.
Try boot from {ok}, see the mac address during booting (if the system is currently up, go to init 0 mode) :
ok boot net&lt;/p&gt;
&lt;p&gt;Resetting ...
LOM event: 56d 21h39m43s host reset&lt;/p&gt;
&lt;p&gt;þ
Sun Fire V120 (UltraSPARC-IIe 648MHz), No Keyboard
OpenBoot 4.0, 1024 MB memory installed, Serial #61911409.
Ethernet address 0:3:ba:b0:b1:71, Host ID: 83b0b171.&lt;/p&gt;
&lt;p&gt;Back to lom&amp;gt; or sc&amp;gt; using 'break' command.&lt;/p&gt;
&lt;p&gt;4. Set &lt;strong&gt;/etc/ethers&lt;/strong&gt; and &lt;strong&gt;/etc/hosts&lt;/strong&gt; in Linux server with the mac address and hostname of the solaris client.&lt;/p&gt;
&lt;p&gt;elinpra@pegasus &amp;gt; echo "0:3:ba:b0:b1:71 solclient" &amp;gt;&amp;gt; /etc/ethers
elinpra@pegasus &amp;gt; echo "192.168.10.5 solclient" &amp;gt;&amp;gt; /etc/hosts&lt;/p&gt;
&lt;p&gt;5. Start the rarpd if has not started yet.( I’m using debian based linux here )
root@pegasus &amp;gt; /etc/init.d/rarpd start&lt;/p&gt;
&lt;p&gt;6. If you're installing using Solaris iso file, mount the iso file to a directory using the following command, otherwise if using Solaris CD/DVD, directly go to step 8:
root@pegasus &amp;gt; mkdir -p /mnt/sol10
root@pegasus &amp;gt; mount -o loop solaris_iso_file.iso /mnt/sol10
root@pegasus &amp;gt; cd /mnt/sol10&lt;/p&gt;
&lt;p&gt;7. If you have the Solaris 10 CD, insert it on pegasus, do the following steps :
root@pegasus &amp;gt; cd /mnt/cdrom/ (to your solaris cdrom directory)&lt;/p&gt;
&lt;p&gt;8. Find the suitable kernel for your machine type. Mine is SunFire v120, so it will be sun4u type. If your hardware is T5220, T2000 etc then you need sun4v kernel.
Locate the kernel on directory Solaris_10/Tools/Boot/platform/sun4u/inetboot for sun4u, or Solaris_10/Tools/Boot/platform/sun4v/inetboot for sun4v.
Copy it to &lt;strong&gt;/srv/tftp&lt;/strong&gt; and make symbolic link to that file into C0A80A05.&lt;/p&gt;
&lt;p&gt;root@pegasus &amp;gt; cp inetboot /srv/tftp
root@pegasus &amp;gt; ln -s /srv/tftp/inetboot /srv/tftp/C0A80A05&lt;/p&gt;
&lt;p&gt;9. Start tftpd daemon in pegasus :
root@pegasus &amp;gt; /etc/init.d/openbsd-inetd restart&lt;/p&gt;
&lt;p&gt;10. start nfs service in pegasus :
root@pegasus &amp;gt; /etc/init.d/nfs-kernel-server start&lt;/p&gt;
&lt;p&gt;11. Prepare nfs mount so that solclient later on can download the entire installation package using nfs mount. Set the mount root into where the cdrom or iso files are mounted. Make sure that the nfs mount root from solclient is /sol10.&lt;/p&gt;
&lt;p&gt;root@pegasus &amp;gt; exportfs &lt;em&gt;:/mnt/cdrom -o fsid=0,ro,no_root_squash,crossmnt,no_subtree_check,sync exportfs &lt;/em&gt;:/mnt -o fsid=0,ro,no_root_squash,crossmnt,no_subtree_check,sync Check if the nfs shares can be mounted correctly.&lt;/p&gt;</summary><category term="jumpstart Unix Linux stuff solaris"></category></entry><entry><title>Playing around with low end VPS box</title><link href="http://blog.theprasojos.web.id/playing-around-with-low-end-vps-box.html" rel="alternate"></link><updated>2010-04-05T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2010-04-05:playing-around-with-low-end-vps-box.html</id><summary type="html">&lt;p&gt;Last week I just bought a VPS account for playing around with. It feels so great having our own shell account with root login so that we can do anything inside. I bought it from &lt;a href="http://www.pasarhosting.com"&gt;here&lt;/a&gt;. First of all, I bought the minimalist one, with 64mb memory, with no burstable ram :D, using Centos. I simply cant do anything, their Centos installation itself took around 20-30mb ram. I also not well enough playing with Yum. This is not great, so I upgraded the account to 128mb ram. At the same time I noticed that besides Centos, the hosting provider also provide Debian Lenny as the OS....why dont you said that from the beginning ??? :D Now, I'm running Lenny with 128mb ram. The VM specs itself it's not that bad, considering it's powered with 2 cpu @3Ghz, 128mb ram with no swap ( this guy &lt;a href="https://www.vpsmart.com/clients/knowledgebase.php?action=displayarticle&amp;amp;id=4"&gt;here&lt;/a&gt; shares a great script to create a fake swap, but I dont need it any longer ;) read the rest of the entry to know why... ), and with 10Gb disk, more than enough storage for minimalist like me :)&lt;/p&gt;
&lt;p&gt;So, first thing first, chop all the unnecessary program, replace it with the program with smaller 'cost'. Just do ps -ef and there I found apache2 and Sendmail sitting around and eating my memory. Just do :&lt;/p&gt;
&lt;h1&gt;apt-get remove --purge sendmail apache2&lt;/h1&gt;
&lt;p&gt;And dont forget to kill them, and remove them from startup script.&lt;/p&gt;
&lt;h1&gt;kill -9 pid&lt;/h1&gt;
&lt;h1&gt;update-rc.d -f remove apache2&lt;/h1&gt;
&lt;h1&gt;update-rc.d -f remove sendmail&lt;/h1&gt;
&lt;p&gt;Ok, that left me around 5 mb used memory. Not bad :)
Next thing is to replace the default shell, since bash shell become greedy enough to eat my memory. I replaced it with pdksh since after googling around, this pdksh shell saves ~1mb for every shell session...good enough. So I install it :&lt;/p&gt;
&lt;h1&gt;apt-get install pdksh&lt;/h1&gt;
&lt;p&gt;Dont remove the bash shell yet, since it has a lot of dependencies. Leave it there, but dont use it :) How do we do that ? Just edit your own default shell to become pdksh in /etc/passwd :&lt;/p&gt;
&lt;h1&gt;vi /etc/passwd&lt;/h1&gt;
&lt;p&gt;Change the line using /bin/bash, into /bin/pdksh, and voillaa, next login session will be using pdksh.&lt;/p&gt;
&lt;p&gt;Not enought with just # prompt ? It's time to decorate your shell with some fancy prompts, just edit the .profile located inside the user's home directory ( just do ls -la to see it, since it's a hidden file ). Add the following line :&lt;/p&gt;
&lt;p&gt;HOSTNAME=&lt;code&gt;hostname&lt;/code&gt;
PS1=`print "&lt;/p&gt;</summary><category term="Tips Unix Linux stuff Web Server Nginx"></category></entry><entry><title>Quick guide on UNIX task scheduling with at and batch command</title><link href="http://blog.theprasojos.web.id/quick-guide-on-unix-task-scheduling-with-at-and-batch-command.html" rel="alternate"></link><updated>2009-05-18T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2009-05-18:quick-guide-on-unix-task-scheduling-with-at-and-batch-command.html</id><summary type="html">&lt;p&gt;While task scheduling in UNIX commonly uses Crontab facilities, UNIX based system (actually, Windows provide it too, at.exe) also provide at command. Both related to the same area, task scheduling. While Crontab aims to schedule a recurring command (every minutes, every month, every week, etc), at command aims to schedule a task that run once, with specific time arguments. Here’s one example of how we can schedule a task with at command:&lt;/p&gt;
&lt;p&gt;$ at now 1 hour &amp;amp;1 &amp;gt; outfile | mailx mygroup
!
commands will be executed using /bin/tcsh
job 1242637613.s at Mon May 18 16:06:53 2009&lt;/p&gt;
&lt;p&gt;As we can see from the example above, we want to schedule a task to be executed 1 hour from now, and the task to be executed is diff file1 file2 2&amp;gt;&amp;amp;1 &amp;gt; outfile | mailx mygroup. The at command then returns the job id, which we will able to list all the queueing at command using atq or at –l below:&lt;/p&gt;
&lt;p&gt;$ atq
Rank Execution Date Owner Job Queue Job Name
1st May 18, 2009 17:06 minsat 1242637774.a a stdin&lt;/p&gt;
&lt;p&gt;$ at -l
1242637774.a Mon May 18 16:18:45 2009&lt;/p&gt;
&lt;p&gt;From above we can see that there are only 1 jobs queuing at queue named ‘a’ (this is special queue name for at, and it is used to distinguish between the job executed by at and batch command). We can also see that the execution time will be May 18, 2009 17:06.&lt;/p&gt;
&lt;p&gt;And to cancel the scheduled at command, we use atrm or at –r command as follows:&lt;/p&gt;
&lt;p&gt;$ atrm 1242637774.a
1242637774.a: removed&lt;/p&gt;
&lt;p&gt;$ at -r 1242637774.a
1242637774.a: removed&lt;/p&gt;
&lt;p&gt;There are lots of other parameter we can use for describing the time parameter and how to execute the at command which is I found it quite ‘human readable’. Here’s some list of other possible parameter we can use:&lt;/p&gt;
&lt;p&gt;1. Direct time
$ at 01.30
$ at 0815am Jan 24
$ at 5 pm FRIday
2. Now keyword
$ at now 1 minutes
$ at now 1 hours
$ at now " 1day"
3. Tomorrow keyword
$ at 0830 tomorrow
4. Noon keyword
$ at noon tomorrow
5. Midnight keyword
$ at midnight tomorrow
6. Week keyword
$ at 2pm next week
7. Piped with other command
$ echo "mail -s 'REMINDER: Task Scheduler samples' lintang.jp@gmail.com" | at '5/18/2009 10:00AM'
8. Putting the job inside a file
$ at –f runScript.sh now 1 hour
9. Sending an email after the job is completed
$ at –m –f runScript.sh now 1 hour
10. Using another shell instead of the user’s default shell for execution
$ at –c –f runScript.sh now 1 week // C Shell
$ at –k –f runScript.sh now 1 week // Korn Shell
$ at –s –f runScript.sh now 1 week // Bourne Shell&lt;/p&gt;
&lt;p&gt;Several behaviors and conditions that must be known when running at command as follows:&lt;/p&gt;
&lt;p&gt;1. All environment variables, current working directory, file creation mask, and system resource limits during at utility execution will be retained and used when the at job is executed. So it’s different with Crontab where we have to set our environment variables manually to be called inside our script execution.
2. The default shell environment to be used during execution is the user’s default shell, listed in /etc/passwd.
3. Any users that is allowed or forbidden to use at command are listed in the following file :&lt;/p&gt;
&lt;p&gt;1. /usr/lib/cron/at.deny // denied user
2. /usr/lib/cron/at.allow // allowed user&lt;/p&gt;
&lt;p&gt;If the file does not exist, for example: at.allow file does not exist, means that all users are allowed to use at command.&lt;/p&gt;
&lt;p&gt;While batch command is similar with at -q b -m now commands. Meaning that the batch command will use different queue with at (special queue named ‘b’), and by default it will send a report via email. It will also execute right away. If the queue is full, then the command will have to wait to be executed one by one.&lt;/p&gt;
&lt;p&gt;Resource : 1. Unix at man pages, with some slang modifications :p&lt;/p&gt;
&lt;p&gt;Fiuh, alhamdulillah, that was hard to wrote :D&lt;/p&gt;</summary><category term="Tips Unix Linux stuff"></category></entry><entry><title>Bye bye apache, welcome Nginx</title><link href="http://blog.theprasojos.web.id/bye-bye-apache-welcome-nginx.html" rel="alternate"></link><updated>2008-12-22T00:00:00+00:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2008-12-22:bye-bye-apache-welcome-nginx.html</id><summary type="html">&lt;p&gt;Bagi saya, php tetap memiliki kenangan yang indah dalam mengisi hari-hari pemrograman saya terdahulu. Programming language yang fleksibel, dan nggak pake ribet. Justru kesulitan ditemui ketika deploy di server. Kebanyakan server yang tersedia sudah diinstall default dengan bundle apache, beserta modul-modul yang sudah di tentukan sebelumnya. Kalau pake keluarga Redhat, iya kalau kebetulan dapet rpm yang pas versinya, kalo nggak ? Cara paling enak memang tetap dengan compile dari source, karena kita bisa bongkar pasang modul yang kita inginkan, tambahkan semaunya, kurangi sesukanya. Jaman dulu(nggak dulu banget sih, 2004), saya hanya kenal Apache dan IIS buat jadi webserver untuk skrip php saya. Belakangan ini, muncul sebuah webserver yang tidak terlalu terkenal, tapi sepertinya ampuh. Kenapa ampuh ? Coba anda pergi ke netcraft.com, dan coba anda scan situs wordpress.com dan detik.com, apa webserver mereka ? Mereka pakai Nginx (baca:engine X). Ini dua situs besar loh, dan saya sangat yakin, tiap hari banyak diantara kita yang berinteraksi dengan kedua situs ini, ya tho ? Nggak mungkin dong mereka pake webserver yang kurang 'terkenal' kalo nggak karena mereka merasakan keampuhan dibaliknya, tul ndak ? Coba buka aja deh langsung di &lt;a href="http://nginx.net/"&gt;situsnya&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ok, karena saya bukan pembuat Nginx, sejarahnya tidak akan saya beberkan disini. Berikut sebagai pengingat saja buat saya (syukur kalau berguna buat anda juga) untuk ngebangun server PHP siap pakai dengan Nginx dan lighttpd.
Berikut Linux saya, ubuntu 7.10 :
lintang@cygnus:~$ uname -a
Linux cygnus 2.6.22-14-generic #1 SMP Sun Oct 14 23:05:12 GMT 2007 i686 GNU/Linux
Disini kebetulan waktu nginstall, saya pake apt-get saja untuk nginx nya, baru php dan lighttpdnya yang compile dari source. Selain nginx, kita juga harus install dependenciesnya, terutama pcre dan zlib, serta openssl kalau anda ingin.
root@cygnus:~# apt-get install libpcre3 libpcre3-dev zlib1g zlib1g-dev nginx
Tunggu sejenak, bikin kopi dulu juga boleh. Atau kalau anda ingin waktu anda efisien, mari kita donlot dulu PHP dan Lighttpd nya :D
Saya ambil PHP versi 5.2.6, dan Lighttpd versi 1.4.19. Dari mana ? please deh, silakan googling, mudah didapat kok kedua-duanya.
Ok, kita mulai dengan PHP dulu, silakan ekstrak, compile, dan install. Berikut opsi yang saya gunakan untuk PHP saya.
lintang@cygnus:~$ ./configure --prefix=/usr/local/php-5.2.6 --with-mysql --enable-fastcgi --with-sockets --with-zlib
Ini berarti, kita akan instal PHP kita nanti di direktori /usr/local/php-5.2.6, mengikut-sertakan library koneksi php untuk mysql, membuat PHP yang berfungsi sebagai interpreter CGI ( nantinya skrip PHP bisa dijalankan dari shell, mirip /bin/bash atau /usr/bin/perl), lalu PHP tersebut dapat memiliki/membuka socket tersendiri (nantinya PHP akan berjalan sebagai process yang terpisah dari webserver, tidak seperti model Apache dimana PHP berjalan sebagai modul di dalamnya), lalu yang terakhir, mengikut sertakan library php untuk support kompresi dengan tipe Gzip.
Tunggu sejenak, setelah sukses, silakan lakukan langkah dibawah seperti biasa :
lintang@cygnus:~$ make
lintang@cygnus:~$ sudo make install
Nah, coba cek di direktori /usr/local/php-5.2.6/bin, seharusnya ada file executable bernama php-cgi. File inilah yang akan berjalan sebagai interpreter PHP anda dari shell.
Menurut beberapa sumber dari internet, sebenarnya php-cgi ini saja cukup untuk dipanggil dari Nginx nantinya untuk menjalankan PHP, namun akan lebih baik apabila kita mengambil spawner dari project Lighttpd. Spawner ini akan mengeksekusi php-cgi kita. Berikut langkah-langkahnya, seperti biasa, silakan ekstrak Lig
lintang@cygnus:~$ ./configure --prefix=/opt/lighttpd-1.4.19 --enable-static --disable-shared
Kira-kira maksudnya, kita akan menconfigure Lighttpd sebagai library static yang dependenciesnya mutlak terhadap file-file .so tertentu. Opsi static ini membuat program yang kita compile akan jauh lebih cepat, karena versi dependencies di dalamnya seperti di hardcode. Berkebalikan dengan ketika kita compile dengan modus dinamis, hasilnya program akan lebih lambat, namun dependencies terhadap versi library tertentu bisa dihindari. Kalau kita ingin membuat server yang cepat, siapa peduli dengan dinamisasi, bukan begitu ? :p
Lalu seperti biasa, kita jalankan make, tapi kali ini tanpa make install.
lintang@cygnus:~$ make
Seharusnya nanti, di direktori src/ akan ada file bernama spawn-fcgi. Kopikan file tersebut ke directory /usr/bin sebagai berikut :
lintang@cygnus:~$ sudo cp spawn-fcgi /usr/bin/
Lalu anda buat skrip .sh sederhana sebagai berikut :
lintang@cygnus:/usr/local/php-5.2.6$ cat &amp;gt; /usr/bin/php-fastcgi #!/bin/sh&lt;/p&gt;
&lt;p&gt;/usr/bin/spawn-fcgi -a 127.0.0.1 -p 8999 -f /usr/local/php-5.2.6/bin/php-cgi&lt;/p&gt;
&lt;p&gt;EOF&lt;/p&gt;
&lt;p&gt;Ini adalah skrip untuk menjalankan PHP sebagai proses CGI yang terpisah dari webserver anda nantinya. PHP akan membuka socket di port 8999, dan akan binding di interface lo(127.0.0.1) anda, sehingga hanya bisa diakses dari mesin anda sendiri.
Ok, langkah terakhir tinggal setup nginx.conf anda, punya saya ada di sini /etc/nginx/nginx.conf.
Berikut isi file konfigurasi Nginx saya :
user www-data;
worker_processes 4;&lt;/p&gt;
&lt;p&gt;error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;&lt;/p&gt;
&lt;p&gt;events {
worker_connections 1024;
}&lt;/p&gt;
&lt;p&gt;http {
include /etc/nginx/mime.types;
default_type application/octet-stream;&lt;/p&gt;
&lt;p&gt;access_log /var/log/nginx/access.log;&lt;/p&gt;
&lt;p&gt;sendfile on;&lt;/p&gt;
&lt;h1&gt;tcp_nopush on;&lt;/h1&gt;
&lt;h1&gt;keepalive_timeout 0;&lt;/h1&gt;
&lt;p&gt;keepalive_timeout 65;
tcp_nodelay on;
gzip on;&lt;/p&gt;
&lt;p&gt;include /etc/nginx/sites-enabled/*;&lt;/p&gt;
&lt;p&gt;}
Perhatikan baris yang di bold, bahwa Nginx saya berjalan atas nama user www-data, sehingga user ini mutlak harus ada sebelumnya, sepertinya kalau di Ubuntu, user ini dibuatkan otomatis ketika kita install Nginx yah, saya lupa sih :D.
Baris selanjutnya, worker_processes, saya isi 4. User yang mengakses webserver saya disini kurang dari 100 orang, dan selama ini, 4 worker sudah cukup sih.
Lalu selanjutnya, gzip on, ini modul gzip compress yang kita aktifkan setelah sebelumnya kita install zlib. Dan yang terakhir, kita akan meng-include kan semua file konfigurasi di direktori /etc/nginx/sites-enabled. Berikut contoh file konfigurasi saya di direktori tersebut :
Filename : atutor.conf
server {
listen 80;
server_name atutor;&lt;/p&gt;
&lt;p&gt;access_log /var/log/nginx/atutor.access.log;&lt;/p&gt;
&lt;p&gt;location / {
root /var/www/nginx-default;
index index.html index.htm index.php;
}&lt;/p&gt;
&lt;h1&gt;error_page 404 /404.html;&lt;/h1&gt;
&lt;h1&gt;redirect server error pages to the static page /50x.html&lt;/h1&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;error_page 500 502 503 504 /50x.html;
location = /50x.html {
root /var/www/nginx-default/ATutor;
}&lt;/p&gt;
&lt;h1&gt;proxy the PHP scripts to Apache listening on 127.0.0.1:80&lt;/h1&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;location ~ .php$ {&lt;/h1&gt;
&lt;h1&gt;proxy_pass http://127.0.0.1;&lt;/h1&gt;
&lt;h1&gt;}&lt;/h1&gt;
&lt;h1&gt;pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000&lt;/h1&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;location ~ .php$ {
fastcgi_pass 127.0.0.1:8999;
fastcgi_index index.php;
fastcgi_param SCRIPT_FILENAME /var/www/nginx-default$fastcgi_script_name;
include /etc/nginx/fastcgi_params;
}
}&lt;/p&gt;
&lt;p&gt;Konfigurasi ini mengatakan bahwa, saya memiliki sebuah aplikasi (kebetulan aTutor), yang saya letakkan di /var/www/nginx-default, dan untuk semua URL yang berakhiran .php, maka saya akan lemparkan requestnya ke CGI interpreter PHP yang berjalan di port 8999 seperti konfigurasi PHP diatas.&lt;/p&gt;
&lt;p&gt;And that's it, kita bisa mengetes konfigurasi nginx kita dengan perintah :
lintang@cygnus:~$ sudo nginx -t
Lalu untuk menjalankan nginx bisa dengan perintah sbb :
lintang@cygnus:~$ sudo nginx
Kalau kita ada perubahan konfigurasi nginx, setelah selesai mengedit file konfigurasi, untuk merestart nginx bisa dengan perintah sbb :
lintang@cygnus:~$ sudo killall -HUP nginx&lt;/p&gt;
&lt;p&gt;Udah deh, silakan arahkan browser anda di port 80, aplikasi anda siap melayani user :)&lt;/p&gt;</summary><category term="aTutor Unix Linux stuff Web Server Internet Nginx"></category></entry><entry><title>Ruby Install on DSL Linux</title><link href="http://blog.theprasojos.web.id/ruby-install-on-dsl-linux.html" rel="alternate"></link><updated>2007-11-13T00:00:00+00:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2007-11-13:ruby-install-on-dsl-linux.html</id><summary type="html">&lt;p&gt;Went home earlier than before today, after a day full of meeting with client. I missed my linux. Got a bling about ruby. This stuff sounds cool. Lot's of java programmer migrating to this language, let's give it a shot. I started my adventure by googling with some 'beginner standars' keyword regarding ruby : "howto install ruby", and I got these links :
- http://www.ruby-lang.org/id
- http://hivelogic.com/narrative/articles/ruby_rails_lighttpd_mysql_tiger?status=301
Great, I boot up my DSL linux under qemu, and start downloading the necessary package. I tried to install using DSL's extension facilities (MyDSL-ruby.dsl) but, I don't know if it's work. So I decided to download the source, and compile it, just like the good old days :)
First, I downloaded ruby &lt;a href="ftp://ftp.ruby-lang.org/pub/ruby/stable-snapshot.tar.gz"&gt;here&lt;/a&gt;. And then as usual, run 3 commands :
dsl@1[ruby-1.8.6]$ ./configure --prefix=/opt/ruby-1.8.6
dsl@1[ruby-1.8.6]$ make
dsl@1[ruby-1.8.6]$ sudo make install
And, I got my ruby installed in /opt/ruby-1.8.6. Dont forget to add the path reference to ruby's bin/ directory installation as follows (mine at /opt/ruby-1.8.6/bin) :
export PATH=/opt/ruby-1.8.6/bin:$PATH
To make my life easier, I put that line in /etc/profile, and run : source /etc/profile. Check whether it points to the right path, type : irb, it should shows you some prompt like this :
dsl@0[Installer]$ irb
irb(main):001:0&amp;gt;&lt;/p&gt;
&lt;p&gt;Ok, I continued my journey by getting a tools called RubyGems. This RubyGems is a handy command-line tool for managing the installation of Ruby packages, like Rails ('quoted from &lt;a href="http://hivelogic.com/narrative/articles/ruby_rails_lighttpd_mysql_tiger?status=301"&gt;here&lt;/a&gt; ').
I downloaded it from &lt;a href="http://rubyforge.org/frs/?group_id=126"&gt;here&lt;/a&gt;.
After that, I unpack it, and went inside the exploded directory and type : ruby setup.rb
This will start the installation process of RubyGems.&lt;/p&gt;
&lt;p&gt;OK, next I installed Rails, what is it ?.
Quoted from http://rubyonrails.org/, ruby itself is a programming language, and Rails is the framework, just like Struts in Java. Rails is a full-stack framework for developing database-backed web applications according to the Model-View-Control pattern.&lt;/p&gt;
&lt;p&gt;After RubyGems installed, it's all easy to install Rails, I just have to type :
sudo gem install rails --include-dependencies
And RubyGems will download all the needs.&lt;/p&gt;
&lt;p&gt;While RubyGems downloading my Rails installation, I went to next step and install PCRE and Lighttpd. PCRE is a Ruby regex extensions stands for Perl Compatible Regular Expression. I downloaded it from &lt;a href="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-7.4.tar.gz"&gt;here&lt;/a&gt;. While Lighttpd is a webserver that became the default one when we choose Rails. I downloaded Lighttpd from &lt;a href="http://www.lighttpd.net/download/lighttpd-1.4.18.tar.bz2"&gt;here&lt;/a&gt;.
First, PCRE. I run : ./configure, make, and make install. I done the same command with Lighttpd, only that I gave different prefix on each ./configure like this :
PCRE : ./configure --prefix=/opt/pcre-7.4
Lighttpd : ./configure --prefix=/opt/Lighttpd-1.4.18
And the rest make and make install commands were same.&lt;/p&gt;
&lt;p&gt;Ok, I should be ready for rock and roll with ruby on rails.
I'll write my next experiments later. Now, it's time to get rest, we'll have a great patch deployment tomorrow :)&lt;/p&gt;</summary><category term="Ruby DSL Linux stuff"></category></entry><entry><title>Bosan...</title><link href="http://blog.theprasojos.web.id/bosan.html" rel="alternate"></link><updated>2007-08-09T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2007-08-09:bosan.html</id><summary type="html">&lt;p&gt;Bosan dengan PHP. Lagi di kantor nih, males ngapa-ngapain.
O ya, psychotazkia.or.id is up and running, walaupun make CMSnya orang :)&lt;/p&gt;
&lt;p&gt;Originally posted : 08/10/04 5:08&lt;/p&gt;</summary><category term="CMS"></category></entry><entry><title>Buat hacker keadilan...</title><link href="http://blog.theprasojos.web.id/buat-hacker-keadilan.html" rel="alternate"></link><updated>2007-08-09T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2007-08-09:buat-hacker-keadilan.html</id><summary type="html">&lt;p&gt;For hacker-keadilan ....&lt;/p&gt;
&lt;p&gt;Detik...menit...jam....
Hari...Bulan...Tahun...
tlah berganti&lt;/p&gt;
&lt;p&gt;saatnya memulai
fase barukehidupan&lt;/p&gt;
&lt;p&gt;Ummat menanti
Selamat berjuang Bro ...&lt;/p&gt;
&lt;p&gt;originally posted : 12/09/04 18:46&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Kru-keadilan.....last word.</title><link href="http://blog.theprasojos.web.id/kru-keadilanlast-word.html" rel="alternate"></link><updated>2007-08-09T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2007-08-09:kru-keadilanlast-word.html</id><summary type="html">&lt;p&gt;Kru-keadilan, gak terasa kamu udah lama menemaniku sejak 2002. Saat-saat yang indah dan pahit kita lalui silih berganti, sampai tiba saatnya aku harus melepasmu, demi kebaikan semua.&lt;/p&gt;
&lt;p&gt;Kru-keadilan, maafkan sikapku selama ini, yg kadang-kadang menganggap remeh kemampuanmu. Sekarang aku tahu, kamu nggak kalah dengan yang lain..hanya lebih lambat, that's all...&lt;/p&gt;
&lt;p&gt;Aku juga tahu, beberapa game tidak mampu kamu mainkan karena keterbatasan grafis, but it's ok, I'm not a gamer. Dengan Counter strike saja aku sudah puas koq.&lt;/p&gt;
&lt;p&gt;Kru-keadilan, teringat saat-saat kita mroyek bersama, saat-saat aku mengerjakan tugas, saat saat aku mengerjakan tugas akhir, kau dengan setia menemaniku.
Terimakasih untuk itu semua.&lt;/p&gt;
&lt;p&gt;Di tempatmu yang baru nanti, kuharap engkau bahagia.&lt;/p&gt;
&lt;p&gt;Terimakasih, atas semuanya.&lt;/p&gt;
&lt;p&gt;Kru-keadilan :&lt;/p&gt;
&lt;p&gt;Celeron 1,1 Ghz,512M,20Gb...&lt;/p&gt;
&lt;p&gt;Originally posted : 10/06/05 4:56&lt;/p&gt;</summary><category term="Laptop"></category></entry><entry><title>Ngabuburit dengan PHP</title><link href="http://blog.theprasojos.web.id/ngabuburit-dengan-php.html" rel="alternate"></link><updated>2007-08-09T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2007-08-09:ngabuburit-dengan-php.html</id><summary type="html">&lt;p&gt;Assalamu'alaikum ...&lt;/p&gt;
&lt;p&gt;hari minggu, lagi nunggu buka di kantor, sambil nunggu burning suse ma xandros desktop, bosan mau ngapain, jadi ngisi blog deh. mau cerita tentang PHP, one of the most powerfull programming language in the web environments.di project yg sekarang, aku make php dan xml (ini sih mungkin biasa ya),mbikin monitoring tools(baca:kulit) buat aplikasi sms gateway nya kannel.benernya kannel dah nyediain sih, interface cgi mereka, namun biar bisa dijual, kayaknya interface yg mereka sediain gak cukup "menarik", makanya php datang sebagai pahlawan bertopeng :p. Tau kan, di kannel mereka nge bind port tertentu buat monitoring sms gateway mereka, kalo disini sih port 13000, tergantug settingan adminport di kannel.conf nya.Nah, tantangannya adalah bagaimana informasi status gateway yg update tiap detik tuh bisa diterima langsung di klien tanpa halaman web yg dibangun tuh "berkedip", you know, blinking, kalo kita ngerefresh halamannya kan jelek, masak tiap detik refresh. Nah, untuk yg satu ini, salut deh buat microsoft, yg, harus diakui, bener bener paling bagus ngimplementasiin XML di browser mereka. Dengan javascript timer, dan microsoft XMLHTTP, it's done, jadi deh. Jadi ceritanya tuh, kita tetep ngupdate info, narik ke client lewat browser, tapi nggak dengan cara ngerefresh satu halaman. Untuk monitoring seperti ini, kan informasinya harus realtime, berarti butuh koneksi terus menerus antara klien dengan server kannel. Kalo lewat web, setiap kita minta koneksi ke server, kan selanjutnya udah, putus, walaupun masih ada objek session, tapi gak ada gunanya, soalnya kita bener bener minta info yg terbaru dari server. Jadi, konsepnya, kita tetep minta info ke server tiap detik, via javascript timer dan XMLHTTP tadi, tapi lewat "jalan belakang, dimana user juga gak tau bahwa web browsernya sedang ngerequest halaman terus menerus ke server, yg mereka tau ada tulisan berisi status yg keupdate terus di layar mereka. Kalo di mozilla, entahlah, belum tau. YG jelas, implementasi XML Data Island di Mozilla gak sebagus dan semudah punya Microsoft (omongan jujur dari pecinta linux :p ).&lt;/p&gt;
&lt;p&gt;Selain itu, aku juga make php buat generate report dengan format excel dan pdf, bikin chart juga dengan library jpgraph. Agar php support format pdf, harus download dulu library dari pdflib, setelah itu, untuk memulai, ada library/class php bagus milik fpdf di http://www.fpdf.org, cool, kita bisa masukin gambar juga di pdf kita.&lt;/p&gt;
&lt;p&gt;Masalah lain ada pada waktu generate pdf.Kan di aplikasi web itu aku juga bikin graph chart dari library jpgraph gd, file yg terbentuk kan berasal dari php, jadi nggak murni file grafik, cuman di set content-type nya berupa grafik. Ehh, si fpdf nggak mau, errornya bilang, bahwa file grafik hasil generate dari php itu nggak ditemukan. Hmm, pusing juga, padahal path nya bener loh. Akhirnya aku ngoprek lagi tuh jpgraph, sampai pada settingan dimana jpgraph mendukung cache, jadi file hasil generate tadi bisa disimpan sebagai cache berbentuk FILE ASLI bertipe...macem macem sih, kebetulan punyaku berformat png, ya udah deh, tinggal set pdfnya supaya ngambil gambar dari file asli di direktori cache tadi, beres...&lt;/p&gt;
&lt;p&gt;eh, dah dulu yak, dah buka nih....mau cari minum dulu di pantry, bye,.....&lt;/p&gt;
&lt;p&gt;Originally posted : 31/10/04 5:49&lt;/p&gt;</summary><category term=""></category></entry><entry><title>SimplyMepis</title><link href="http://blog.theprasojos.web.id/simplymepis.html" rel="alternate"></link><updated>2007-08-09T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2007-08-09:simplymepis.html</id><summary type="html">&lt;p&gt;Beberapa hari ini nyoba SimplyMepis, nice distro. As easy as Mandrake, but as powerful as Debian. Such a perfect combination. We can choose, whether RPM or APT. Ditambah internet di indosat yang sangat cepat, menjadikan nih linux mantep banget. Kecuali satu hal, ada trouble di libxml2 sehingga agak kacau nginstall PHP5. Error libxml2, padahal udah ada, /etc/ld.so.conf juga udah ngarah ke direktori itu, libxml2.so juga dah ada, so what yah ? pusing juga, belum solved. Belum lagi error bagian support PHP untuk mysql, as you know, di PHP5 sekarang mysql udah gak secara native lagi di support, kalo kita nggak nambahin parameter --with-mysql ya gak support. Maunya gak usah nginstall PHP, pindah ke java semua deh, tapi aku masih butuh phpMyAdmin nya, hehehe, mau gak mau harus nginstall PHP deh.&lt;/p&gt;
&lt;p&gt;That's All, ntar kalo ada pengalaman lagi ku share deh.&lt;/p&gt;
&lt;p&gt;Originally posted : 27/12/04 20:52&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Apache Httpd and Tomcat integration using mod_jk, part 1</title><link href="http://blog.theprasojos.web.id/apache-httpd-and-tomcat-integration-using-mod_jk-part-1.html" rel="alternate"></link><updated>2007-06-03T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2007-06-03:apache-httpd-and-tomcat-integration-using-mod_jk-part-1.html</id><summary type="html">&lt;p&gt;In my other blog, I've wrote about howto use mod_jk2 to integrate httpd and tomcat. The article can be accesed &lt;a href="http://www.jroller.com/page/JPrasojo/?anchor=setup_tomcat_clustering_and_load"&gt;here&lt;/a&gt; and &lt;a href="http://www.jroller.com/page/JPrasojo/?anchor=setup_tomcat_clustering_and_load1"&gt;here&lt;/a&gt;.
Now, since mod_jk2 has not supported again by apache-tomcat-connector developers, so in this article I will use mod_jk. I'm using :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;httpd-2.2.4, can be downloaded &lt;a href="http://apache.the.net.id/httpd/httpd-2.2.4.tar.gz"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;tomcat-5.2.23, can be downloaded &lt;a href="http://apache.the.net.id/tomcat/tomcat-5/v5.5.23/bin/apache-tomcat-5.5.23.tar.gz"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;tomcat-connector, can be downloaded &lt;a href="http://apache.the.net.id/tomcat/tomcat-connectors/jk/binaries/linux/jk-1.2.21/mod_jk-1.2.21-apache-2.2.x-linux-i686.so"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I prefer apache.the.net.id since this is the nearest mirror from Indonesia. O ya, Im using Kubuntu Feisty Fawn in my laptop.
First, we install the httpd-2.2.4 first. Unzip it, place it at some directory you like. In my environment, my user has full access to /opt directory, so I'm using it.
onty@phoenix:/opt$ gunzip httpd-2.2.4.tar.gz
onty@phoenix:/opt$ tar -xvf httpd-2.2.4.tar
onty@phoenix:/opt$ mv httpd-2.2.4 httpd-2.2.4-src
onty@phoenix:/opt$ cd httpd-2.2.4-src
Configure, put the result in /opt/httpd-2.2.4, enable shared object, enable cgi support. Enabling shared object makes us able to load dynamic shared object library. We're using mod_jk's shared object, so we need to enable apache to support dynamic shared object library. This also usefull if you want to enable your apache httpd server to serve PHP also. Same like this, you would also compile PHP as shared object, and then load it dynamically to apache httpd using LoadModule syntax in your httpd.conf .
onty@phoenix:/opt/httpd-2.2.4-src$ ./configure --prefix=/opt/httpd-2.2.4 --enable-so --enable-cgi
onty@phoenix:/opt/httpd-2.2.4-src$ make  onty@phoenix:/opt/httpd-2.2.4-src$ make install
Now, try to start it using root :
onty@phoenix:/opt/httpd-2.2.4-src$ cd /opt/httpd-2.2.4
onty@phoenix:/opt/httpd-2.2.4$ su -
root@phoenix:/opt/httpd-2.2.4# bin/apachectl start
If everything ok, you should be able to point your browser to http://localhost now, and see if you can read any "It works" there.
OK, now we continue to install the tomcat connector. Apache has provided us with the binary version of the connector. As mentioned in before, we should now already download it. I'm using mod_jk-1.2.21-apache-2.2.x-linux-i686.so. What we need to do is just load this shared object so that can be used by apache, that simple ? yes :D
Edit your httpd.conf, add this line :
Include conf/extra/mod_jk.conf
This is new style from apache that makes us easier to maintain our configuration file in modular basis.
Now create a new file in conf/extra/ name it mod_jk.conf.
--------------------------------------------- mod_jk.conf -----------------------------------
JkWorkersFile /opt/httpd-2.2.4/conf/workers.properties
JkShmFile /var/log/httpd/mod_jk.shm
JkLogFile /opt/httpd-2.2.4/logs/mod_jk.log
JkLogLevel info
JkLogStampFormat "[%a %b %d %H:%M:%S %Y]"
JkMount /tomcat-docs/* router&lt;/p&gt;
&lt;p&gt;JkMount jkstatus
Order deny,allow
Deny from all
Allow from 127.0.0.1&lt;/p&gt;
&lt;p&gt;-------------------------------------------------------
From the configuration file, we can see that :
We will place the log file in /opt/httpd-2.2.4/logs/mod_jk.log.
We will configure the connectors with a file named workers.properties located in /opt/httpd-2.2.4/conf .
We will have shared file that will be used by apache and tomcat, located in /var/log/httpd/mod_jk.shm. If the directory /var/log/httpd doesnt exist yet, we should create it first using root user.
The logger level will be INFO.
We will map /tomcat-docs/ request in httpd to be handled by tomcat, so make sure that this webapp exist in tomcat. By default if you download tomcat, this webapp is already exist. Later you can change it to your own webapp. And this request will be handled by a worker named 'router'.
Last one is for jkmanager monitoring tools. There will be new context path named /jkmanager/ that will show us status for our jk_module. This context path only allowed to be accessed from 127.0.0.1 (localhost).&lt;/p&gt;
&lt;p&gt;Ok, now we need to create workers.properties in conf/ directory. See part 2 of this post.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Apache Httpd and Tomcat integration using mod_jk, part 2</title><link href="http://blog.theprasojos.web.id/apache-httpd-and-tomcat-integration-using-mod_jk-part-2.html" rel="alternate"></link><updated>2007-06-03T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2007-06-03:apache-httpd-and-tomcat-integration-using-mod_jk-part-2.html</id><summary type="html">&lt;p&gt;This posting splitted because somehow blogspot just cut it. I don't know why but when I previewed the posting, blogspot just cut the postings, so I splitted it into 2 parts.&lt;/p&gt;
&lt;p&gt;Ok, now we create workers.properties file.
onty@phoenix:/opt/httpd-2.2.4$ vi conf/workers.properties
------------------------------------------------------------------------------------
worker.list=router,jkstatus&lt;/p&gt;
&lt;h1&gt;Define a worker using ajp13&lt;/h1&gt;
&lt;p&gt;worker.worker1.port=8009
worker.worker1.host=localhost
worker.worker1.type=ajp13
worker.worker1.lbfactor=1&lt;/p&gt;
&lt;h1&gt;Define prefered failover node for worker1&lt;/h1&gt;
&lt;p&gt;worker.worker1.redirect=worker2&lt;/p&gt;
&lt;h1&gt;Define another worker using ajp13&lt;/h1&gt;
&lt;p&gt;worker.worker2.port=8009
worker.worker2.host=localhost
worker.worker2.type=ajp13
worker.worker2.lbfactor=1&lt;/p&gt;
&lt;h1&gt;Define the LB worker&lt;/h1&gt;
&lt;p&gt;worker.router.type=lb
worker.router.balance_workers=worker1,worker2&lt;/p&gt;
&lt;h1&gt;Define the status worker&lt;/h1&gt;
&lt;p&gt;worker.jkstatus.type=status&lt;/p&gt;
&lt;p&gt;------------------------------------------------------------------------------------
This file defines all our workers. Our 'router' worker will be a load balancer worker for other workers, including worker1 and worker2.&lt;/p&gt;
&lt;p&gt;Now, we install (unzip, exactly) our apache. We use apache-5.2.23. We will modify the directory structure little bit, as shown like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://bp0.blogger.com/_02IFrF9Xz98/RmKTVamjjKI/AAAAAAAABkI/CptR2eLPrpA/s320/opt-structure.png" /&gt;
Give attention to tomcat1 and tomcat2 directory, and also directories inside it.We will use 2 instance of tomcat1 and tomcat2 as worker 'worker1' and 'worker2'. We also need to configure each server.xml in tomcat1 and tomcat2 so that they're not using the same port.
Tomcat1 :
Server port="8005" shutdown="SHUTDOWN"
..
..
Connector port="8009"
enableLookups="false" redirectPort="8443" protocol="AJP/1.3"
..
..&lt;/p&gt;
&lt;p&gt;Connector port="8080" maxHttpHeaderSize="8192"
maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
enableLookups="false" redirectPort="8443" acceptCount="100"
connectionTimeout="20000" disableUploadTimeout="true"&lt;/p&gt;
&lt;p&gt;Tomcat2 :
Server port="9005" shutdown="SHUTDOWN"
..
..
Connector port="9009"
enableLookups="false" redirectPort="8443" protocol="AJP/1.3"
..
..&lt;/p&gt;
&lt;p&gt;Connector port="8080" maxHttpHeaderSize="8192"
maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
enableLookups="false" redirectPort="8443" acceptCount="100"
connectionTimeout="20000" disableUploadTimeout="true"&lt;/p&gt;
&lt;p&gt;One more thing, we need to create startup and shutdown file for each tomcat instance. We call it start1.sh, start2.sh, stop1.sh, stop2.sh
start1.sh&lt;/p&gt;
&lt;h1&gt;!/bin/bash&lt;/h1&gt;
&lt;p&gt;export CATALINA_BASE=/opt/apache-tomcat-5.5.23-cluster/tomcat1
export JAVA_HOME=/opt/jdk1.6.0
./startup.sh
start2.sh&lt;/p&gt;
&lt;h1&gt;!/bin/bash&lt;/h1&gt;
&lt;p&gt;export CATALINA_BASE=/opt/apache-tomcat-5.5.23-cluster/tomcat2
export JAVA_HOME=/opt/jdk1.6.0
./startup.sh
stop1.sh&lt;/p&gt;
&lt;h1&gt;!/bin/bash&lt;/h1&gt;
&lt;p&gt;export CATALINA_BASE=/opt/apache-tomcat-5.5.23-cluster/tomcat1
export JAVA_HOME=/opt/jdk1.6.0
./shutdown.sh
stop2.sh&lt;/p&gt;
&lt;h1&gt;!/bin/bash&lt;/h1&gt;
&lt;p&gt;export CATALINA_BASE=/opt/apache-tomcat-5.5.23-cluster/tomcat2
export JAVA_HOME=/opt/jdk1.6.0
./shutdown.sh&lt;/p&gt;
&lt;p&gt;Basically, these file just aimed to setup environment variable named CATALINA_BASE to point which tomcat instance we want to start/stop.&lt;/p&gt;
&lt;p&gt;Now, lets try our installation. Start both tomcat instance, and also start your httpd server. Point out the browser to http://localhost/tomcat-docs/ and see if the request handled correctly. Httpd will redirect the request so that can be served by tomcat. Also point the browser to http://localhost/jkmanager/. This context path shows us the Load Balancing status for our tomcat instance.&lt;/p&gt;
&lt;p&gt;Feel free to drop any comments about this posting.
Thanks, good luck trying !&lt;/p&gt;</summary><category term=""></category></entry><entry><title>My (Outdated) Mac OS.X 10.4.1</title><link href="http://blog.theprasojos.web.id/my-outdated-mac-osx-1041.html" rel="alternate"></link><updated>2007-06-03T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2007-06-03:my-outdated-mac-osx-1041.html</id><summary type="html">&lt;p&gt;I think this picture will describe enough for us ...&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://jroller.com/resources/j/JPrasojo/myMac.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Cool eh ? Sayang ini baru versi 10.4.1, yg terbaru versi 10.4.7&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Nexenta Alpha 5</title><link href="http://blog.theprasojos.web.id/nexenta-alpha-5.html" rel="alternate"></link><updated>2007-06-03T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2007-06-03:nexenta-alpha-5.html</id><summary type="html">&lt;p&gt;Hehe, alhamdulillah, seneng juga bisa nyobain nexenta alpha 5 walau hanya di vmware. Sempat kaget nggak nemu pkgadd, malah nemu apt-get. Dan pertama bingung juga waktu mau install package dasar -&amp;gt; GCC karena kalo install satu-satu dependancy nya kan nggak mungkin (bisa kriting). Akhirnya nemu repository yg harus ditambahin di /etc/apt/sources.list yaitu :&lt;/p&gt;
&lt;p&gt;deb http://gnusolaris.org/apt-obsolete elatte-unstable main contrib non-free
deb-src http://gnusolaris.org/apt-obsolete elatte-unstable main contrib non-free&lt;/p&gt;
&lt;p&gt;Terus, kepentok juga ketika menghadapi proxy kantor yg make ISA Server, dimana harus masukin username/password domain. Solusinya, make ini : http://ntlmaps.sourceforge.net/&lt;/p&gt;
&lt;p&gt;Happy nexenta-ing ... :)&lt;/p&gt;
&lt;p&gt;Sekarang mau coba me linux kan nih solaris, terus mau coba zoning di solaris, trus mau coba....WAAA IYAAAA, laptopnya mau dituker ama kantor beberapa hari lagi :( mosok install ulang rek :(( semoga vmware bisa dikopi doang .vmx nya, hopefully ....&lt;/p&gt;
&lt;p&gt;originally posted 6/26/06&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Solaris, SNMP, and OpenNMS</title><link href="http://blog.theprasojos.web.id/solaris-snmp-and-opennms.html" rel="alternate"></link><updated>2007-06-03T00:00:00+01:00</updated><author><name>Lintang JP</name></author><id>tag:blog.theprasojos.web.id,2007-06-03:solaris-snmp-and-opennms.html</id><summary type="html">&lt;p&gt;These day, I explore about SNMP. After wikipedia-ing in &lt;a href="http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol"&gt;here&lt;/a&gt;, I try to install one of the recomended software called OpenNMS. After tried the live demo, it looks cool. So I decided to download it in &lt;a href="http://downloads.sourceforge.net/opennms/opennms-1.3.2-1-sol10-sparc-local.gz?modtime=1168971264&amp;amp;big_mirror=0"&gt;here&lt;/a&gt;.
I followed all the installation step guide from &lt;a href="http://www.opennms.org/documentation/InstallUnStable.html"&gt;here&lt;/a&gt;. I also need to download and install the pre requisites package such as rrdtool, and the postgresql. Fortunately, blastwave.org has great tools called pkg-get, yeap, sounds familiar with you Debian users ? I also thought that only Nexenta OS has this such-thing tools, but now, all solaris distro can use this tools I guess, well, at least I tried that one and it works for Solaris in both Sparc and Intel machine.
Ok, back to the tools. If we followed the step exactly, and goes to this step : install -dis, I got an error said that fail to load the iplike.so because libgcc_so.1 not found. That's some problem I usually got on linux box. If this is linux box, I just have to locate it, insert the path to /etc/ld.so.conf, and run the /sbin/ldconfig as root. But this is solaris box, cant do that, so, after googling, I found the crle command. I tried that to point the location for shared object files. Still no works. Howcome ? Dont ask me, it just doesnt work:p, So...again, googling, and found same problem in &lt;a href="http://www.experts-exchange.com/Software/Server_Software/Web_Servers/Q_22464371.html"&gt;here&lt;/a&gt;. So the problem will be solved by just copying the .so files to /usr/lib ? And, it works. This is weird, I alredy put the /usr/lib within the crle command like this :&lt;/p&gt;
&lt;p&gt;-bash-3.00# crle -l /usr/local/lib:/usr/sfw/lib:/lib:/usr/lib/:/opt/opennms/lib:/usr/sfw/lib/gcc/sparc-sun-solaris2.10/3.4.3/&lt;/p&gt;
&lt;p&gt;Ah, no idea, so I run the install -dis again, and this time it works.....&lt;/p&gt;
&lt;p&gt;Next, playing around with OpenNMS and try to setup the weblogic snmp agent to send trap message to the OpenNMS poller. We'll see....&lt;/p&gt;
&lt;p&gt;originally posted 4/11/07&lt;/p&gt;</summary><category term=""></category></entry></feed>